// Code generated by counterfeiter. DO NOT EDIT.
package processorfakes

import (
	"sync"

	"github.com/JulzDiverse/aviator/cockpit"
	"github.com/JulzDiverse/aviator/processor"
)

type FakeSpruceClient struct {
	MergeWithOptsStub        func(cockpit.MergeConf) ([]byte, error)
	mergeWithOptsMutex       sync.RWMutex
	mergeWithOptsArgsForCall []struct {
		arg1 cockpit.MergeConf
	}
	mergeWithOptsReturns struct {
		result1 []byte
		result2 error
	}
	mergeWithOptsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpruceClient) MergeWithOpts(arg1 cockpit.MergeConf) ([]byte, error) {
	fake.mergeWithOptsMutex.Lock()
	ret, specificReturn := fake.mergeWithOptsReturnsOnCall[len(fake.mergeWithOptsArgsForCall)]
	fake.mergeWithOptsArgsForCall = append(fake.mergeWithOptsArgsForCall, struct {
		arg1 cockpit.MergeConf
	}{arg1})
	fake.recordInvocation("MergeWithOpts", []interface{}{arg1})
	fake.mergeWithOptsMutex.Unlock()
	if fake.MergeWithOptsStub != nil {
		return fake.MergeWithOptsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.mergeWithOptsReturns.result1, fake.mergeWithOptsReturns.result2
}

func (fake *FakeSpruceClient) MergeWithOptsCallCount() int {
	fake.mergeWithOptsMutex.RLock()
	defer fake.mergeWithOptsMutex.RUnlock()
	return len(fake.mergeWithOptsArgsForCall)
}

func (fake *FakeSpruceClient) MergeWithOptsArgsForCall(i int) cockpit.MergeConf {
	fake.mergeWithOptsMutex.RLock()
	defer fake.mergeWithOptsMutex.RUnlock()
	return fake.mergeWithOptsArgsForCall[i].arg1
}

func (fake *FakeSpruceClient) MergeWithOptsReturns(result1 []byte, result2 error) {
	fake.MergeWithOptsStub = nil
	fake.mergeWithOptsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSpruceClient) MergeWithOptsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.MergeWithOptsStub = nil
	if fake.mergeWithOptsReturnsOnCall == nil {
		fake.mergeWithOptsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.mergeWithOptsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeSpruceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.mergeWithOptsMutex.RLock()
	defer fake.mergeWithOptsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpruceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ processor.SpruceClient = new(FakeSpruceClient)
