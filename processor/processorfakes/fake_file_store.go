// Code generated by counterfeiter. DO NOT EDIT.
package processorfakes

import (
	"sync"

	"github.com/JulzDiverse/aviator/processor"
)

type FakeFileStore struct {
	GetFileStub        func(string) ([]byte, bool)
	getFileMutex       sync.RWMutex
	getFileArgsForCall []struct {
		arg1 string
	}
	getFileReturns struct {
		result1 []byte
		result2 bool
	}
	getFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 bool
	}
	SetFileStub        func([]byte, string)
	setFileMutex       sync.RWMutex
	setFileArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileStore) GetFile(arg1 string) ([]byte, bool) {
	fake.getFileMutex.Lock()
	ret, specificReturn := fake.getFileReturnsOnCall[len(fake.getFileArgsForCall)]
	fake.getFileArgsForCall = append(fake.getFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetFile", []interface{}{arg1})
	fake.getFileMutex.Unlock()
	if fake.GetFileStub != nil {
		return fake.GetFileStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getFileReturns.result1, fake.getFileReturns.result2
}

func (fake *FakeFileStore) GetFileCallCount() int {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return len(fake.getFileArgsForCall)
}

func (fake *FakeFileStore) GetFileArgsForCall(i int) string {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return fake.getFileArgsForCall[i].arg1
}

func (fake *FakeFileStore) GetFileReturns(result1 []byte, result2 bool) {
	fake.GetFileStub = nil
	fake.getFileReturns = struct {
		result1 []byte
		result2 bool
	}{result1, result2}
}

func (fake *FakeFileStore) GetFileReturnsOnCall(i int, result1 []byte, result2 bool) {
	fake.GetFileStub = nil
	if fake.getFileReturnsOnCall == nil {
		fake.getFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 bool
		})
	}
	fake.getFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 bool
	}{result1, result2}
}

func (fake *FakeFileStore) SetFile(arg1 []byte, arg2 string) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.setFileMutex.Lock()
	fake.setFileArgsForCall = append(fake.setFileArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("SetFile", []interface{}{arg1Copy, arg2})
	fake.setFileMutex.Unlock()
	if fake.SetFileStub != nil {
		fake.SetFileStub(arg1, arg2)
	}
}

func (fake *FakeFileStore) SetFileCallCount() int {
	fake.setFileMutex.RLock()
	defer fake.setFileMutex.RUnlock()
	return len(fake.setFileArgsForCall)
}

func (fake *FakeFileStore) SetFileArgsForCall(i int) ([]byte, string) {
	fake.setFileMutex.RLock()
	defer fake.setFileMutex.RUnlock()
	return fake.setFileArgsForCall[i].arg1, fake.setFileArgsForCall[i].arg2
}

func (fake *FakeFileStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	fake.setFileMutex.RLock()
	defer fake.setFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ processor.FileStore = new(FakeFileStore)
