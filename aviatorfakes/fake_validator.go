// Code generated by counterfeiter. DO NOT EDIT.
package aviatorfakes

import (
	"sync"

	"github.com/JulzDiverse/aviator"
)

type FakeValidator struct {
	ValidateSpruceStub        func([]aviator.Spruce) error
	validateSpruceMutex       sync.RWMutex
	validateSpruceArgsForCall []struct {
		arg1 []aviator.Spruce
	}
	validateSpruceReturns struct {
		result1 error
	}
	validateSpruceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeValidator) ValidateSpruce(arg1 []aviator.Spruce) error {
	var arg1Copy []aviator.Spruce
	if arg1 != nil {
		arg1Copy = make([]aviator.Spruce, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.validateSpruceMutex.Lock()
	ret, specificReturn := fake.validateSpruceReturnsOnCall[len(fake.validateSpruceArgsForCall)]
	fake.validateSpruceArgsForCall = append(fake.validateSpruceArgsForCall, struct {
		arg1 []aviator.Spruce
	}{arg1Copy})
	fake.recordInvocation("ValidateSpruce", []interface{}{arg1Copy})
	fake.validateSpruceMutex.Unlock()
	if fake.ValidateSpruceStub != nil {
		return fake.ValidateSpruceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateSpruceReturns.result1
}

func (fake *FakeValidator) ValidateSpruceCallCount() int {
	fake.validateSpruceMutex.RLock()
	defer fake.validateSpruceMutex.RUnlock()
	return len(fake.validateSpruceArgsForCall)
}

func (fake *FakeValidator) ValidateSpruceArgsForCall(i int) []aviator.Spruce {
	fake.validateSpruceMutex.RLock()
	defer fake.validateSpruceMutex.RUnlock()
	return fake.validateSpruceArgsForCall[i].arg1
}

func (fake *FakeValidator) ValidateSpruceReturns(result1 error) {
	fake.ValidateSpruceStub = nil
	fake.validateSpruceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeValidator) ValidateSpruceReturnsOnCall(i int, result1 error) {
	fake.ValidateSpruceStub = nil
	if fake.validateSpruceReturnsOnCall == nil {
		fake.validateSpruceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateSpruceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateSpruceMutex.RLock()
	defer fake.validateSpruceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aviator.Validator = new(FakeValidator)
