// Code generated by counterfeiter. DO NOT EDIT.
package aviatorfakes

import (
	"sync"

	"github.com/JulzDiverse/aviator"
)

type FakeSpruceProcessor struct {
	ProcessStub        func([]aviator.Spruce) error
	processMutex       sync.RWMutex
	processArgsForCall []struct {
		arg1 []aviator.Spruce
	}
	processReturns struct {
		result1 error
	}
	processReturnsOnCall map[int]struct {
		result1 error
	}
	ProcessWithOptsStub        func([]aviator.Spruce, bool, bool, bool) error
	processWithOptsMutex       sync.RWMutex
	processWithOptsArgsForCall []struct {
		arg1 []aviator.Spruce
		arg2 bool
		arg3 bool
		arg4 bool
	}
	processWithOptsReturns struct {
		result1 error
	}
	processWithOptsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpruceProcessor) Process(arg1 []aviator.Spruce) error {
	var arg1Copy []aviator.Spruce
	if arg1 != nil {
		arg1Copy = make([]aviator.Spruce, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.processMutex.Lock()
	ret, specificReturn := fake.processReturnsOnCall[len(fake.processArgsForCall)]
	fake.processArgsForCall = append(fake.processArgsForCall, struct {
		arg1 []aviator.Spruce
	}{arg1Copy})
	fake.recordInvocation("Process", []interface{}{arg1Copy})
	fake.processMutex.Unlock()
	if fake.ProcessStub != nil {
		return fake.ProcessStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.processReturns.result1
}

func (fake *FakeSpruceProcessor) ProcessCallCount() int {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return len(fake.processArgsForCall)
}

func (fake *FakeSpruceProcessor) ProcessArgsForCall(i int) []aviator.Spruce {
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	return fake.processArgsForCall[i].arg1
}

func (fake *FakeSpruceProcessor) ProcessReturns(result1 error) {
	fake.ProcessStub = nil
	fake.processReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpruceProcessor) ProcessReturnsOnCall(i int, result1 error) {
	fake.ProcessStub = nil
	if fake.processReturnsOnCall == nil {
		fake.processReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.processReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpruceProcessor) ProcessWithOpts(arg1 []aviator.Spruce, arg2 bool, arg3 bool, arg4 bool) error {
	var arg1Copy []aviator.Spruce
	if arg1 != nil {
		arg1Copy = make([]aviator.Spruce, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.processWithOptsMutex.Lock()
	ret, specificReturn := fake.processWithOptsReturnsOnCall[len(fake.processWithOptsArgsForCall)]
	fake.processWithOptsArgsForCall = append(fake.processWithOptsArgsForCall, struct {
		arg1 []aviator.Spruce
		arg2 bool
		arg3 bool
		arg4 bool
	}{arg1Copy, arg2, arg3, arg4})
	fake.recordInvocation("ProcessWithOpts", []interface{}{arg1Copy, arg2, arg3, arg4})
	fake.processWithOptsMutex.Unlock()
	if fake.ProcessWithOptsStub != nil {
		return fake.ProcessWithOptsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.processWithOptsReturns.result1
}

func (fake *FakeSpruceProcessor) ProcessWithOptsCallCount() int {
	fake.processWithOptsMutex.RLock()
	defer fake.processWithOptsMutex.RUnlock()
	return len(fake.processWithOptsArgsForCall)
}

func (fake *FakeSpruceProcessor) ProcessWithOptsArgsForCall(i int) ([]aviator.Spruce, bool, bool, bool) {
	fake.processWithOptsMutex.RLock()
	defer fake.processWithOptsMutex.RUnlock()
	return fake.processWithOptsArgsForCall[i].arg1, fake.processWithOptsArgsForCall[i].arg2, fake.processWithOptsArgsForCall[i].arg3, fake.processWithOptsArgsForCall[i].arg4
}

func (fake *FakeSpruceProcessor) ProcessWithOptsReturns(result1 error) {
	fake.ProcessWithOptsStub = nil
	fake.processWithOptsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpruceProcessor) ProcessWithOptsReturnsOnCall(i int, result1 error) {
	fake.ProcessWithOptsStub = nil
	if fake.processWithOptsReturnsOnCall == nil {
		fake.processWithOptsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.processWithOptsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpruceProcessor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.processMutex.RLock()
	defer fake.processMutex.RUnlock()
	fake.processWithOptsMutex.RLock()
	defer fake.processWithOptsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpruceProcessor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aviator.SpruceProcessor = new(FakeSpruceProcessor)
